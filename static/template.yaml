- sensor:
    - name: Occupant count
      state: >
        {{ states.person | selectattr('state', 'equalto', 'home') | list | count }}

    - name: Accumulative electricity cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_electricity_15p0706167_2000050773706_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: Accumulative gas cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_gas_g4p07003781500_7475340302_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: "Solar power generation"
      unit_of_measurement: "W"
      state: >
        {% set update_threshold = now() - timedelta(minutes=5) %}
        {% if states.sensor.myenergi_myenergi_hub_power_generation.last_updated < update_threshold %}
          0
        {% else %}
          {{ states('sensor.myenergi_myenergi_hub_power_generation') }}
        {% endif %}

    - name: "Solar power generation paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_generated_today') | float * states('input_number.fit_generation_per_kwh') | float) | round(2) }}

    - name: "Export paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_grid_export_today') | float * states('sensor.octopus_energy_electricity_15p0706167_2000060833200_export_current_rate') | float) | round(2) }}

    - name: "Garden sensor temperature"
      unit_of_measurement: "°C"
      icon: mdi:thermometer
      state: >
        {{ state_attr('weather.home', 'temperature') }}

    - name: "Garden sensor humidity"
      unit_of_measurement: "%"
      icon: mdi:water-percent
      state: >
        {{ state_attr('weather.home', 'humidity') }}

    - name: "Energy intents"
      icon: mdi:calendar
      state: "off"
      attributes:
        events: >
          {% set ns = namespace(events=[]) %}

          {# --- Add event --- #}
          {% macro add_event(start, end, title, intent) %}
            {% set ns.events = ns.events + [{
              'start': start,
              'end': end,
              'title': title,
              'intent': intent
            }] %}
          {% endmacro %}

          {# --- Collect all input events first (calendar, dispatches, off-peak) --- #}

          {# Calendar events ---#}
          {% for cal in [
            'calendar.octopus_energy_a_fad3b08a_octoplus_saving_sessions',
            'calendar.octopus_energy_a_fad3b08a_octoplus_free_electricity_session'
          ] %}
            {% set start_raw = state_attr(cal, 'start_time') %}
            {% set end_raw = state_attr(cal, 'end_time') %}
            {% set summary = state_attr(cal, 'message') %}
            {% if start_raw and end_raw %}
              {% set start = as_datetime(start_raw) | as_local %}
              {% set end = as_datetime(end_raw) | as_local %}
              {% if 'saving' in cal %}
                {{ add_event(start, end, summary, 'Discharge') }}
              {% elif 'free' in cal %}
                {{ add_event(start, end, summary, 'Charge') }}
              {% endif %}
            {% endif %}
          {% endfor %}

          {# Planned dispatches ---#}
          {% for d in state_attr('binary_sensor.octopus_energy_00000000_0002_4000_8020_00000008191c_intelligent_dispatching', 'planned_dispatches') | default([]) %}
            {% set start = as_datetime(d.start) | as_local %}
            {% set end = as_datetime(d.end) | as_local %}
            {{ add_event(start, end, 'Planned Dispatch', 'Charge') }}
          {% endfor %}

          {# Off-peak sessions ---#}
          {% for state_type in ['current', 'next'] %}
            {% set start_attr = state_attr('binary_sensor.octopus_energy_electricity_15p0706167_2000050773706_off_peak', state_type + '_start') %}
            {% set end_attr = state_attr('binary_sensor.octopus_energy_electricity_15p0706167_2000050773706_off_peak', state_type + '_end') %}
            {% if start_attr and end_attr %}
              {% set start = as_datetime(start_attr) | as_local %}
              {% set end = as_datetime(end_attr) | as_local %}
              {{ add_event(start, end, 'Off Peak Electricity (' ~ state_type | capitalize ~ ')', 'Charge') }}
            {% endif %}
          {% endfor %}

          {# --- Add pre-charge discharge slots after all events ---#}
          {% set all_events = ns.events | sort(attribute='start') %}
          {% for e in all_events %}
            {% if e.intent == 'Charge' %}
              {% set discharge_start = e.start - timedelta(hours=1) %}
              {% set discharge_end = e.start - timedelta(minutes=5) %}  {# Reduce end by 5 min #}
              {# Only add if slot is free ---#}
              {% set slot_free = true %}
              {% for existing in all_events %}
                {% if existing.start < discharge_end and existing.end > discharge_start %}
                  {% set slot_free = false %}
                {% endif %}
              {% endfor %}
              {% if slot_free %}
                {{ add_event(discharge_start, discharge_end, 'Pre-Charge Discharge', 'Discharge') }}
              {% endif %}
            {% endif %}
          {% endfor %}

          {{ ns.events | sort(attribute='start') }}

- binary_sensor:
    - name: One-room mode
      state: >
        {{ states('sensor.occupant_count') | int <= 1 }}

    - name: Battery exporting
      state: >
        {{ states('sensor.envoy_122322027694_current_power_consumption') | float * 1000 < states('input_number.battery_export_threshold') | float }}
