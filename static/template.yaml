- sensor:
    - name: Occupant count
      state: >
        {{ states.person | selectattr('state', 'equalto', 'home') | list | count }}

    - name: Accumulative electricity cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_electricity_15p0706167_2000050773706_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: Accumulative gas cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_gas_g4p07003781500_7475340302_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: "Solar power generation"
      unit_of_measurement: "W"
      state: >
        {% set update_threshold = now() - timedelta(minutes=5) %}
        {% if states.sensor.myenergi_myenergi_hub_power_generation.last_updated < update_threshold %}
          0
        {% else %}
          {{ states('sensor.myenergi_myenergi_hub_power_generation') }}
        {% endif %}

    - name: "Solar power generation paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_generated_today') | float * states('input_number.fit_generation_per_kwh') | float) | round(2) }}

    - name: "Export paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_grid_export_today') | float * states('sensor.octopus_energy_electricity_15p0706167_2000060833200_export_current_rate') | float) | round(2) }}

    - name: "Garden sensor temperature"
      unit_of_measurement: "°C"
      icon: mdi:thermometer
      state: >
        {{ state_attr('weather.home', 'temperature') }}

    - name: "Garden sensor humidity"
      unit_of_measurement: "%"
      icon: mdi:water-percent
      state: >
        {{ state_attr('weather.home', 'humidity') }}

    - name: "Current energy intent"
      icon: mdi:lightning-bolt
      state: >
        {% set events = state_attr('sensor.energy_intents', 'events') or [] %}
        {% set now_time = now() %}
        {% set ns = namespace(current_intent='Idle') %}
        {% for event in events %}
          {% if event.start and event.end %}
            {% set start_dt = as_datetime(event.start) %}
            {% set end_dt = as_datetime(event.end) %}
            {% if start_dt <= now_time <= end_dt %}
              {% set ns.current_intent = event.intent %}
            {% endif %}
          {% endif %}
        {% endfor %}
        {{ ns.current_intent }}

    - name: "Energy intents"
      icon: mdi:calendar
      state: "off"
      attributes:
        events: >
          {% set ns = namespace(events=[]) %}

          {# --- Collect calendar events ---#}
          {% for cal in [
            'calendar.octopus_energy_a_fad3b08a_octoplus_saving_sessions',
            'calendar.octopus_energy_a_fad3b08a_octoplus_free_electricity_session'
          ] %}
            {% set start_raw = state_attr(cal, 'start_time') %}
            {% set end_raw = state_attr(cal, 'end_time') %}
            {% if start_raw and end_raw %}
              {% set start = as_datetime(start_raw) %}
              {% set end = as_datetime(end_raw) %}
              {% if 'saving' in cal %}
                {% set ns.events = ns.events + [{'start': start, 'end': end, 'intent': 'Discharge'}] %}
              {% elif 'free' in cal %}
                {% set ns.events = ns.events + [{'start': start, 'end': end, 'intent': 'Charge'}] %}
              {% endif %}
            {% endif %}
          {% endfor %}

          {# --- Planned dispatches ---#}
          {% for d in state_attr('binary_sensor.octopus_energy_00000000_0002_4000_8020_00000008191c_intelligent_dispatching', 'planned_dispatches') | default([]) %}
            {% set start = as_datetime(d.start) %}
            {% set end = as_datetime(d.end) %}
            {% set ns.events = ns.events + [{'start': start, 'end': end, 'intent': 'Charge'}] %}
          {% endfor %}

          {# --- Off-peak sessions ---#}
          {% for state_type in ['current', 'next'] %}
            {% set start_attr = state_attr('binary_sensor.octopus_energy_electricity_15p0706167_2000050773706_off_peak', state_type + '_start') %}
            {% set end_attr = state_attr('binary_sensor.octopus_energy_electricity_15p0706167_2000050773706_off_peak', state_type + '_end') %}
            {% if start_attr and end_attr %}
              {% set start = as_datetime(start_attr) %}
              {% set end = as_datetime(end_attr) %}
              {% set ns.events = ns.events + [{'start': start, 'end': end, 'intent': 'Charge'}] %}
            {% endif %}
          {% endfor %}

          {# --- Flatten overlapping events ---#}
          {% set ns_flat = namespace(flattened=[]) %}
          {% set sorted_events = ns.events | sort(attribute='start') %}

          {% for event in sorted_events %}
            {% if ns_flat.flattened | length == 0 %}
              {% set ns_flat.flattened = ns_flat.flattened + [event] %}
            {% else %}
              {% set last = ns_flat.flattened[-1] %}
              {% if event.start <= last.end %}
                {% set new_end = event.end if event.end > last.end else last.end %}
                {% set new_intent = 'Charge' if 'Charge' in [last.intent, event.intent] else 'Discharge' %}
                {% set ns_flat.flattened = ns_flat.flattened[:-1] + [{'start': last.start, 'end': new_end, 'intent': new_intent}] %}
              {% else %}
                {% set ns_flat.flattened = ns_flat.flattened + [event] %}
              {% endif %}
            {% endif %}
          {% endfor %}

          {# --- Add pre-charge discharge slots (-60m to -5m before Charge) ---#}
          {% set ns_final = namespace(final=[]) %}
          {% for e in ns_flat.flattened %}
            {% if e.intent == 'Charge' %}
              {% set pre_start = e.start - timedelta(minutes=60) %}
              {% set pre_end = e.start - timedelta(minutes=5) %}
              {% set ns_final.final = ns_final.final + [{'start': pre_start, 'end': pre_end, 'intent': 'Discharge'}] %}
            {% endif %}
            {% set ns_final.final = ns_final.final + [e] %}
          {% endfor %}

          {# --- Output final JSON ---#}
          {% set ns_json = namespace(output=[]) %}
          {% for e in ns_final.final %}
            {% set ns_json.output = ns_json.output + [{'start': e.start.isoformat(), 'end': e.end.isoformat(), 'intent': e.intent}] %}
          {% endfor %}
          {{ ns_json.output | to_json }}

- binary_sensor:
    - name: One-room mode
      state: >
        {{ states('sensor.occupant_count') | int <= 1 }}
