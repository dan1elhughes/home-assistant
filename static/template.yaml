- sensor:
    - name: Occupant count
      state: >
        {{ states.person | selectattr('state', 'equalto', 'home') | list | count }}

    - name: Next saving session
      state: >
        {{ state_attr('binary_sensor.octopus_energy_a_fad3b08a_octoplus_saving_sessions', 'next_joined_event_start') }}

    - name: Accumulative electricity cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_electricity_15p0706167_2000050773706_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: Accumulative gas cost without standing charge
      icon: mdi:currency-gbp
      unit_of_measurement: "£"
      state: >
        {{ state_attr('sensor.octopus_energy_gas_g4p07003781500_7475340302_current_accumulative_cost', 'total_without_standing_charge') }}

    - name: "Solar power generation"
      unit_of_measurement: "W"
      state: >
        {% set update_threshold = now() - timedelta(minutes=5) %}
        {% if states.sensor.myenergi_myenergi_hub_power_generation.last_updated < update_threshold %}
          0
        {% else %}
          {{ states('sensor.myenergi_myenergi_hub_power_generation') }}
        {% endif %}

    - name: "Solar power generation paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_generated_today') | float * states('input_number.fit_generation_per_kwh') | float) | round(2) }}

    - name: "Export paid"
      unit_of_measurement: "£"
      state: >
        {{ (states('sensor.myenergi_myenergi_hub_grid_export_today') | float * states('sensor.octopus_energy_electricity_15p0706167_2000060833200_export_current_rate') | float) | round(2) }}

    - name: "Garden sensor temperature"
      unit_of_measurement: "°C"
      icon: mdi:thermometer
      state: >
        {{ state_attr('weather.home', 'temperature') }}

    - name: "Garden sensor humidity"
      unit_of_measurement: "%"
      icon: mdi:water-percent
      state: >
        {{ state_attr('weather.home', 'humidity') }}

    - name: "Time until next rate"
      unit_of_measurement: "minutes"
      state: >
        {% set start_time = state_attr('sensor.octopus_energy_electricity_15p0706167_2000050773706_next_rate', 'start') %}
        {% if start_time %}
          {% set start_dt = as_datetime(start_time) %}
          {% set now_dt = now() %}
          {% set delta = (start_dt - now_dt).total_seconds() / 60 %}
          {% if delta > 0 %}
            {{ delta | round(0) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          unknown
        {% endif %}

    - name: "Time to fully charge"
      unit_of_measurement: "minutes"
      state: >
        {% set current = states('sensor.envoy_122322027694_available_battery_energy') | float(0) %}
        {% set capacity = states('sensor.envoy_122322027694_battery_capacity') | float(0) %}
        {% set remaining = capacity - current %}
        {% set charge_rate = 9600 %}
        {% if remaining > 0 and charge_rate > 0 %}
          {% set minutes = (remaining / charge_rate) * 60 %}
          {{ minutes | round(0) }}
        {% else %}
          0
        {% endif %}

    - name: "Time to fully discharge"
      unit_of_measurement: "minutes"
      state: >
        {% set current = states('sensor.envoy_122322027694_available_battery_energy') | float(0) %}
        {% set discharge_rate = 9600 %}
        {% if current > 0 and discharge_rate > 0 %}
          {% set minutes = (current / discharge_rate) * 60 %}
          {{ minutes | round(0) }}
        {% else %}
          0
        {% endif %}

- binary_sensor:
    - name: One-room mode
      state: >
        {{ states('sensor.occupant_count') | int <= 1 }}

    - name: Restart required
      state: >
        {{  states.update
          | selectattr('attributes.release_summary','eq','<ha-alert alert-type=\'error\'>Restart of Home Assistant required</ha-alert>')
          | list
          | count > 0
        }}

    - name: Octopus cheap rate
      state: >
        {% set rate = states('sensor.octopus_energy_electricity_15p0706167_2000050773706_current_rate') | float %}
        {% set threshold = states('input_number.octopus_cheap_threshold') | float / 100 %}
        {{ rate < threshold }}

    - name: Battery exporting
      state: >
        {{ states('sensor.envoy_122322027694_current_power_consumption') | float * 1000 < states('input_number.battery_export_threshold') | float }}
